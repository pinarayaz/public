package ch.epfl.sweng;

/**
 * A class describing a position on the chessboard. Position is stored as a (number, letter) pair,
 * where letter is always upper case (but can be constructed by passing a lower case argument)
 */

public class Position {
    /* ends of board can be edited, between ('H', 8) and up to ('Z', 26). Make sure
    *  board size remains square! */
    public static final char BOARD_END_HORIZONTAL = 'H';
    public static final int  BOARD_END_VERTICAL = 8;
    /* these can NOT be edited */
    public  static final char BOARD_START_HORIZONTAL = 'A';
    public  static final int  BOARD_START_VERTICAL = 1;


    /** vertical position, starting at 1, at white player's side of the board, and extending to
     * BOARD_END_VERTICAL at black player's side. */
    private final int vertical;
    /**
     * horizontal position, starting at 'A', at white player's left side, and extending to
     * BOARD_END_HORIZONTAL at white player's right side. */
    private final char horizontal;

    public final int  getVertical()   { return vertical; }
    public final char getHorizontal() { return horizontal; }

    private Position(char horizontal, int vertical) {
        this.vertical = vertical;
        this.horizontal = Character.toUpperCase(horizontal);
    }

    private static boolean isRowInRange(int row) {
        return (row >= BOARD_START_VERTICAL) &&
               (row <= BOARD_END_VERTICAL);
    }

    private static boolean isColumnInRange(char column) {
        column = Character.toUpperCase(column);

        return (column >= BOARD_START_HORIZONTAL) &&
               (column <= BOARD_END_HORIZONTAL);
    }

    /**
     * A factory method returning an instance of {@link Position}, if passed arguments allow
     * construction of valid one, null otherwise.
     *
     * @param column horizontal position, starting at 'A', at white player's left side, and up to
     * BOARD_END_HORIZONTAL
     * @param row vertical position, between 1, at white player's side of the board, and up to
     * BOARD_END_VERTICAL
     *
     * @return a {@link Position} instance if row and column are within the chessboard, null
     * otherwise
     */
    public static Position positionIfLegal(char column, int row) {
        if (isRowInRange(row) && isColumnInRange(column))
            return new Position(column, row);
        else
            return null;
    }

    /**
     * A relative movement necessary to get between `this` and `destination`
     * @param destination destination of a planned move
     * @return {@link Offset} encoding distance across horizontal and vertical axes, from `this`
     * to `destination`
     */
    public Offset offsetTo(Position destination) {
        return new Offset(destination.getHorizontal() - getHorizontal(),
                          destination.getVertical()    - getVertical());
    }

    /* Autogenerated by Android Studio. Do not modify without a good reason */
    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;

        Position position = (Position) o;

        if (getVertical() != position.getVertical()) return false;
        return getHorizontal() == position.getHorizontal();
    }

    /**
     * A class encoding the horizontal and vertical distance between two {@link Position}s. Obtained
     * by calling {@link #offsetTo(Position)}
     */
    public static final class Offset {
        public final int horizontal;
        public final int vertical;

        /**
         * Checks if offset would result in no move. That's an important case, because such moves
         * are not legal for any piece.
         * @return true if the offset is (0, 0), false otherwise
         */
        public final boolean isZero() { return (vertical == 0) && (horizontal == 0); }

        private Offset(int horizontal, int vertical) {
            this.horizontal = horizontal;
            this.vertical   = vertical;
        }
    }
}
